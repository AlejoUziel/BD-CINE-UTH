/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import dao.FuncionDAO;
import dao.FuncionDAOImpl;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.Funcion;
import util.Conexion;

/**
 *
 * @author Alejandro
 */
public class PanelFunciones extends javax.swing.JPanel {

    /**
     * Creates new form PanelFunciones
     */
    FuncionDAO funcionDAO = new FuncionDAOImpl();
    DefaultTableModel modelo;

    public PanelFunciones() {
        initComponents();
        modelo = (DefaultTableModel) jTableFunciones.getModel();
        cargarPeliculas();
        cargarSalas();
        cargarFunciones();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jFormattedTextHorario = new javax.swing.JFormattedTextField();
        jLabel2 = new javax.swing.JLabel();
        jTextFieldPrecio = new javax.swing.JTextField();
        jComboBoxPelicula = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jComboBoxSala = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        btnRegistrarFuncion = new javax.swing.JButton();
        btnActualizarFuncion = new javax.swing.JButton();
        btnLimpiarFuncion = new javax.swing.JButton();
        btnEliminarFuncion = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableFunciones = new javax.swing.JTable();

        setPreferredSize(new java.awt.Dimension(1132, 748));

        jLabel1.setText("PELICULA");

        jLabel2.setText("PRECIO");

        jLabel3.setText("HORARIO");

        jComboBoxSala.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxSalaActionPerformed(evt);
            }
        });

        jLabel5.setText("TIPO SALA");

        btnRegistrarFuncion.setBackground(new java.awt.Color(102, 255, 51));
        btnRegistrarFuncion.setText("REGISTRAR");
        btnRegistrarFuncion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegistrarFuncionActionPerformed(evt);
            }
        });

        btnActualizarFuncion.setBackground(new java.awt.Color(255, 255, 153));
        btnActualizarFuncion.setText("ACTUALIZAR");
        btnActualizarFuncion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarFuncionActionPerformed(evt);
            }
        });

        btnLimpiarFuncion.setBackground(new java.awt.Color(153, 0, 255));
        btnLimpiarFuncion.setText("LIMPIAR");

        btnEliminarFuncion.setBackground(new java.awt.Color(255, 0, 0));
        btnEliminarFuncion.setText("ELIMINAR");
        btnEliminarFuncion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarFuncionActionPerformed(evt);
            }
        });

        jTableFunciones.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "ID", "Pel√≠cula", "Sala", "Horario", "Precio"
            }
        ));
        jTableFunciones.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTableFunciones);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1081, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 29, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jComboBoxPelicula, 0, 415, Short.MAX_VALUE)
                            .addComponent(jFormattedTextHorario))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(37, 37, 37)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextFieldPrecio, javax.swing.GroupLayout.PREFERRED_SIZE, 303, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBoxSala, javax.swing.GroupLayout.PREFERRED_SIZE, 303, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(49, 49, 49))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnRegistrarFuncion, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31)
                        .addComponent(btnActualizarFuncion, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(37, 37, 37)
                        .addComponent(btnEliminarFuncion, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31)
                        .addComponent(btnLimpiarFuncion, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jTextFieldPrecio, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jFormattedTextHorario, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jComboBoxSala, javax.swing.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jComboBoxPelicula))
                .addGap(45, 45, 45)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnRegistrarFuncion)
                    .addComponent(btnActualizarFuncion)
                    .addComponent(btnEliminarFuncion)
                    .addComponent(btnLimpiarFuncion))
                .addGap(54, 54, 54)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(90, 90, 90))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBoxSalaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxSalaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxSalaActionPerformed

    private void btnRegistrarFuncionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegistrarFuncionActionPerformed
        // TODO add your handling code here:
        try {
        Funcion funcion = new Funcion();
        funcion.setIdPelicula( obtenerIdPeliculaSeleccionada() );
        funcion.setIdSala( obtenerIdSalaSeleccionada() );
        funcion.setFechaHora( jFormattedTextHorario.getText() );
        //funcion.setPrecio( Double.parseDouble(jTextFieldPrecio.getText()) );

        funcionDAO.registrar(funcion);

        JOptionPane.showMessageDialog(this, "Funci√≥n registrada correctamente.");
        cargarFunciones();  // M√©todo que refresca la JTable
        limpiarCampos();

    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Error al registrar: " + e.getMessage());
    }
    }//GEN-LAST:event_btnRegistrarFuncionActionPerformed

    private void btnActualizarFuncionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarFuncionActionPerformed
        // TODO add your handling code here:
        
        int fila = jTableFunciones.getSelectedRow();
    if (fila == -1) {
        JOptionPane.showMessageDialog(this, "Selecciona una funci√≥n para actualizar.");
        return;
    }

    int id = (int) modelo.getValueAt(fila, 0);

    try {
        Funcion funcion = new Funcion();
        funcion.setId(id);
        funcion.setIdPelicula( obtenerIdPeliculaSeleccionada() );
        funcion.setIdSala( obtenerIdSalaSeleccionada() );
        funcion.setFechaHora( jFormattedTextHorario.getText() );

        funcionDAO.actualizar(funcion);

        JOptionPane.showMessageDialog(this, "Funci√≥n actualizada correctamente.");
        cargarFunciones();
        limpiarCampos();

    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Error al actualizar: " + e.getMessage());
    }
    }//GEN-LAST:event_btnActualizarFuncionActionPerformed

    private void btnEliminarFuncionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarFuncionActionPerformed
        // TODO add your handling code here:
         int fila = jTableFunciones.getSelectedRow();
    if (fila == -1) {
        JOptionPane.showMessageDialog(this, "Selecciona una funci√≥n para eliminar.");
        return;
    }

    int id = (int) modelo.getValueAt(fila, 0);

    int confirm = JOptionPane.showConfirmDialog(this, "¬øEliminar esta funci√≥n?", "Confirmar", JOptionPane.YES_NO_OPTION);
    if (confirm == JOptionPane.YES_OPTION) {
        funcionDAO.eliminar(id);
        JOptionPane.showMessageDialog(this, "Funci√≥n eliminada.");
        cargarFunciones();
        limpiarCampos();
    }
    }//GEN-LAST:event_btnEliminarFuncionActionPerformed

  private void cargarFunciones() {
    modelo.setRowCount(0);  // Limpiar tabla

    for (Funcion f : funcionDAO.listar()) {
        Object[] fila = {
            f.getId(),
            obtenerTituloPeliculaPorId(f.getIdPelicula()),
            f.getIdSala() == 1 ? "Sala 2D" : "Sala 3D",
            f.getFechaHora(),
            // f.getPrecio()
        };
        modelo.addRow(fila);
    }
}

    
    private void limpiarCampos() {
    jFormattedTextHorario.setText("");
    jTextFieldPrecio.setText("");
    jComboBoxPelicula.setSelectedIndex(0);
    jComboBoxSala.setSelectedIndex(0);
    jTableFunciones.clearSelection();
}

    private int obtenerIdPeliculaSeleccionada() {
    
    String titulo = jComboBoxPelicula.getSelectedItem().toString();
    return buscarIdPeliculaPorTitulo(titulo);
}

private int obtenerIdSalaSeleccionada() {
    String sala = jComboBoxSala.getSelectedItem().toString();
    return sala.equals("Sala 2D") ? 1 : 2;
}

private String obtenerTituloPeliculaPorId(int idPelicula) {
    String titulo = "";
    String sql = "SELECT titulo FROM peliculas WHERE id = ?";

    try (Connection conn = Conexion.getConexion();
         PreparedStatement ps = conn.prepareStatement(sql)) {

        ps.setInt(1, idPelicula);
        ResultSet rs = ps.executeQuery();

        if (rs.next()) {
            titulo = rs.getString("titulo");
        }

    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Error obteniendo t√≠tulo de pel√≠cula: " + e.getMessage());
    }

    return titulo;
}

private int buscarIdPeliculaPorTitulo(String titulo) {
    int id = -1;
    String sql = "SELECT id FROM peliculas WHERE titulo = ?";

    try (Connection conn = Conexion.getConexion();
         PreparedStatement ps = conn.prepareStatement(sql)) {

        ps.setString(1, titulo);
        ResultSet rs = ps.executeQuery();

        if (rs.next()) {
            id = rs.getInt("id");
        }

    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Error buscando ID de pel√≠cula: " + e.getMessage());
    }

    return id;
}

private void cargarPeliculas() {
    jComboBoxPelicula.removeAllItems();
    String sql = "SELECT id, titulo FROM peliculas";

    try (Connection conn = Conexion.getConexion();
         PreparedStatement ps = conn.prepareStatement(sql);
         ResultSet rs = ps.executeQuery()) {

        while (rs.next()) {
            int id = rs.getInt("id");
            String titulo = rs.getString("titulo");
            jComboBoxPelicula.addItem(titulo); 

        }

    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Error al cargar pel√≠culas: " + e.getMessage());
    }
}

private void cargarSalas() {
    jComboBoxSala.removeAllItems();
    String sql = "SELECT id, nombre FROM salas";

    try (Connection conn = Conexion.getConexion();
         PreparedStatement ps = conn.prepareStatement(sql);
         ResultSet rs = ps.executeQuery()) {

        while (rs.next()) {
            int id = rs.getInt("id");
            String nombre = rs.getString("nombre");
            jComboBoxSala.addItem(nombre); 
        }

    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Error al cargar salas: " + e.getMessage());
    }
}



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnActualizarFuncion;
    private javax.swing.JButton btnEliminarFuncion;
    private javax.swing.JButton btnLimpiarFuncion;
    private javax.swing.JButton btnRegistrarFuncion;
    private javax.swing.JComboBox<String> jComboBoxPelicula;
    private javax.swing.JComboBox<String> jComboBoxSala;
    private javax.swing.JFormattedTextField jFormattedTextHorario;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableFunciones;
    private javax.swing.JTextField jTextFieldPrecio;
    // End of variables declaration//GEN-END:variables
}
